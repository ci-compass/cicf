# Python packages

Python became very popular in recent years partly because of the
thousands of packages available.

A "package" is a collection of Python code that you can use to
accomplish certain tasks.  Packages can contain libraries, application
programs, or both.  A Python library is a collection of code that
people can use when writing new applications or new libraries.

When you install Python, a set of libraries called the [Python
standard library][stdlib] also gets installed.  Python is said to be a
"batteries included" programming language, because its standard
library is useful to accomplish many common tasks related to:

- Working with text, math, time, dates, etc.;
- Working with various data structures (such as lists, dicts, sets,
  and tuples);
- Reading and writing files;
- Reading and writing data from networked systems;
- Working with processes and threads;
- Working with the operating system; 
- Debugging and profiling; and
- Much more!

[stdlib]: https://docs.python.org/3/library/index.html

### Python modules and packages

We talked a bit about modules in the previous notebook.  Basically:
python packages are organized as _modules_, which is essentially a
collection of files and directories.  The files mostly contain Python
code. Sometimes they can be other kinds of supporting files too.

## An example: using `random` module

As noted above, when you install Python, you get the Python standard
library also, which is a collection of useful modules.  Let us look at
an example of generating random numbers using Python standard library.

The first thing you have to do is tell Python you want to use a module
called `random`, using `import random`.  In order to generate random
numbers, we can use the `random()` function from the `random`
module. Try running the below code cell:

```{python}
import random

print(random.random())
print(random.random())
print(random.random())
```

That generates random numbers between zero and one. There are plenty
of other functions in the random package to do things like generate
random integers between two values or to randomly shuffle the items in
a list.

To learn details about how to use a library, you will need to read its
documentation.  You already know how to find documentation for
standard library modules: we have linked to it in the beginning of
this notebook.  Those documents might be a little confusing in the
beginning, so it is perfectly reasonable to look for friendlier
resources.

## Another example: using the `requests` library

Sometimes using an external package might make things easier.
Sometimes when people work on Python code that other people might find
useful, they package and publish their work in an installable form.

An example package would be the popular `requests` library, which
makes interacting with web sites easier.  In order to use `requests`
in your code, you would install it (with `pip install requests`
perhaps), and then use an `import requests` statement in your program
to use modules from the requests library, and then call functions from
the module:

```{python}
import requests

response = requests.get("https://google.com")

print("Respnse status code: ", response.status_code)
print("Response headers: ", response.headers)
print("Response text: ", response.text)
```

Note that running the above code cell should work without having to
install `requests` library.  This is because `requests` was already
installed when you installed `jupyter`, because the authors of
`jupyter` decided to use `requests` in their code.

You can find [requests library documentation][requests-docs] from its
[PyPI][pypi] Python Package Index [project page][requests].

[requests]: https://pypi.org/project/requests/
[requests-docs]: https://requests.readthedocs.io/en/latest/

## The Python Package Index (PyPI)

In the beginning of this week's tutorial, we used [pip] to install
some Python packages.  What happens when you run `pip install`
something though?  How does `pip` find the packages it need to
install?

[pip]: https://pip.pypa.io/en/stable/

By default, `pip` will search the [Python Package Index][pypi] (also
known as "PyPI") for the package by name, download the appropriate
version of the package, and install it in your machine.  If the
package depends on other packages, pip would install those other
packages also, if they are not already installed.

[pypi]: https://pypi.org/

PyPI is a large repository of Python packages maintained by the
[Python Software Foundation][psf], a non-profit organization that is
responsible for development and maintenance of the Python programming
language and its infrastructure.

[psf]: https://www.python.org/psf-landing/

PyPI happens to be Python's official package repository, and the most
popular one.  There are other repositories also (such as [TestPyPI]),
and you can install packages from those other repositories, should you
ever need to do so.  You can even install packages from certain other
sources such as their git repositories.

[TestPyPI]: https://test.pypi.org/

## Anaconda and Conda

[Anaconda] is a commercially supported "Python distribution".
Anaconda provides a curated collection of software that uses a
different packaging format, and it is not necessarily tied to just
Python.  There are Anaconda packages written in other programming
languages also.  Similar to `pip`, `conda` is Anaconda's package
manager, and [Anaconda.org] is its package repository.

Although we are not going to the details now, Anaconda is popular in
science, AI, and data science communities, so they are worth
mentioning here.

[Anaconda]: https://www.anaconda.com/
[Anaconda.org]: https://anaconda.org/


## Yet another example: the NumPy package

The `math` module is part of the Python standard library.  It
implements a routines to calculate few standard functions and some
basic probability distributions.  

However, since Python's built-in support for numerical calculations is
limited in efficiency and performance, people often reach for the
famous [NumPy] package. 

[NumPy]: https://numpy.org/

NumPy makes numerically-intensive programming easier and makes code
run faster. It brings it's own datatype to the game: an actual array!
Numpy's arrays are quite fast -- substantially faster than Python's
regular way of representing arrays as "lists of lists" (or in three
dimensions, "lists of lists of lists" and so forth.

The critical NumPy data type is the array.  NumPy arrays are faster
and more compact than Python lists. A NumPy array consumes less memory
and is convenient to use.  You can find an excellent
[introduction][numpy-intro] to NumPy in the project's website.

[numpy-intro]: https://numpy.org/doc/stable/user/absolute_beginners.html

In this notebook, let us work through some NumPy examples.  First,
let's tell Python we want to use numpy:

```{python}
import numpy as np
```

The `as np` part lets us specify a _namespace_, in this case a nice,
short name so we don't have to type out `numpy` _every single time_.

The one caveat with NumPy arrays is that all the elements inside an
array need to have the same data type (e.g. integer, float, double).

Now we can create an array or two:

```{python}
a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])
print(a)
```

The `array()` function will turn nested lists into an array.
You can also make new arrays by asking for a zero array of a given size

```{python}
z = np.zeros(3)
print(z)
```

or ones:

```{python}
m = np.ones((3,3))
print(m)
```

(note that the dimensions are given as a _tuple_).

You can also element-wise add, subtract, or multiply:

```{python}
z + 3
```

Or

```{python}
a % 2
```

Comparisons are element wise

```{python}
a > 5
```

You can get the dimensions of an array by querying its `.shape`
property:

```{python}
print(a.shape)
print(m.shape)
print(z.shape)
```

The `shape` property returns us a _tuple_ that tells us how many
elements there are in each dimension.  The number of elements in the
tuple tells us how many dimensions the array has.

### NumPy Linear Algebra

Let's do a little bit of linear algebra. NumPy has routines to do
basic linear algebra, such as finding a matrix inverse, or solving a
linear system.

We will need to bring in the [linalg] ("linear algebra") part of
NumPy, which would be the `numpy.linalg` module.  We will use the name
`nl` as a shorthand for `numpy.linalg`.

[linalg]: https://numpy.org/doc/stable/reference/routines.linalg.html

```{python}
import numpy.linalg as nl

k = np.array([[1,1,1], [1,1,0], [1,0,0]])

kinv = nl.inv(k)
kinv
```

Matrix multiplication, anyone? Python has the `@` operator for exactly
that:

```{python}
k @ kinv
```

For a complete list of operators, see: [Mapping Operators to
Functions][op-table].

[op-table]: http://docs.python.org/library/operator.html#mapping-operators-to-functions

## Matrix visualization

We can use [matplotlib] to visualize matrices:

[matplotlib]: https://matplotlib.org/

```{python}
import matplotlib.pyplot as plt
plt.matshow(a)
```

## Further steps

We have only scratched the surface of what numpy can do. Imagine how
much the other thousands of Python packages can do!  The nice thing
about software development, when it's done correctly, is that pieces
build on top of other pieces.

The [SciPy] package, for instance, has modules for integration,
differentiation, linear algebra, signal processing, image processing
(which is special case of signal processing), and so on.  Lots of
packages then build on top of SciPy.

[SciPy]: https://scipy.org/

In the [next notebook](./4-plot-ligo-data.ipynb), we will download
some LIGO data and write some code to explore the data.
